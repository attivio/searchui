##################################################################################
##################################################################################
### This file contains the configuration for the Search UI servlet used when   ###
### hosting your application in a servlet container. Depending on your use     ###
### case, some of the properties may be optional. See the comments for each    ###
### property to understand how it's used.                                      ###
##################################################################################
##################################################################################


##################################################################################
# HTTPS
# Use these properties to set up the servlet to use SSL for secure communication.  
##################################################################################

# The port to run the servlet on
#server.port=8443

# This is the path to the SSL keystore file to use
#server.ssl.key-store=

# This is the password used when generating the keystore
#server.ssl.key-store-password=

# This is the keystore's type
#server.ssl.key-store-type=PKCS12

# This is the alias for the key within the keystore. When deploying to Tomcat,
# it must be "tomcat"
#server.ssl.key-alias=tomcat

# This flag tells the servlet to enable SSL; you can disable it for testing by setting
# this to false without having to comment out all of the other SSL-related properties
#security.require-ssl=true


##################################################################################
# Attivio Back-End Configuration
# Use these properties to tell the servlet how to talk to the Attivio servers. 
##################################################################################

# The protocol to use for communicating with Attivio. If the Attivio server
# is using SSL, change this to "https"
suit.attivio.protocol=http

# The hostname of the Attivio server
suit.attivio.hostname=localhost

# The port for the Attivio server
suit.attivio.port=17000

# The username to use when communicating with the Attivio server
suit.attivio.username=aieadmin

# The password for that username
suit.attivio.password=attivio

# The authentication token to use instead of the username/password for managed Attivio
# instances in the cloud. If this is set, the username and password parameters are
# ignored and this is appended as a parameter to the URI used for forwarding REST requests. 
#suit.attivio.authToken=

# If you need to configure a proxy to reach the Attivio server, you can use Java
# system properties to do so. Standard properties such as http.proxyHost, http.proxyPort,
# https.proxyHost, and http.proxyPort are respected. Configure your servlet container
# to add these properties (see your servlet container's documentation for details, if
# necessary).

# If you will be accessing the REST API endpoints from a different server (e.g., a custom
# web application), you will need to specify that application's server's URI here (may
# be a comma-separated list if there are multiple origins). This allows cross-origin (CORS)
# access to the servlet.
#suit.attivio.corsOrigins=*

# If you are setting the CORS origin, you can choose to also specify only certain methods
# for CORS access. By default, the servlet will allow access to all HTTP methods ("*") so
# you can generally leave this property commented-out.
#suit.attivio.corsMethods=



##################################################################################
# Search UI Application Configuration
# Use these properties to tell the servlet about your Search UI application. 
##################################################################################

# This property allows you to disable serving of the full Search UI application that
# is included in the servlet. By default, users can access it at the servlet's
# context path (e.g. /searchui/) but if you set this property to false, accessing that
# URI will produce a 404 ("not found") error.
#suit.attivio.serveSearchUI=false

# These are the routes to allow for your application. Trying to access any other
# URLs will result in the servlet trying to serve static resources, such as images
# or the main HTML file. Generally, the list of routes here should match the
# routes defined in your application's main component (e.g. SearchUIApp.js in the
# out-of-the-box version). It is a comma-separated list (with no spaces).
suit.attivio.routes=/,/landing,/results,/results-no-mast,/insights,/doc360,/login,/error

# This is the location of the configuration.properties.js file that controls your
# Search UI application. It should just be a file path (use forward slashes even
# on Windows operating systems).
suit.attivio.configuration=

# This is the location of the users.xml file for your application. If you are using
# XML-based authentication (i.e., the authType defined in the configuration.properties.js
# file is "XML," this is required. If you are using SAML-based SSO, this can be left
# unset or commented out. It should just be a file path (use forward slashes even
# on Windows operating systems).
suit.attivio.users=

# If you are running the servlet as an executable JAR (or, for example, directly
# executing the SuitBackApplication class in Eclipse for debugging purposes),
# you may want to set the context path so the built-in Tomcat will serve the
# application at the right URL. Normally, however, the context path is obtained
# from the name of the WAR file deployed to the server and specifying this property
# isn't necessary.
#server.contextPath=/searchui


##################################################################################
# SAML Configuration
# Use these properties to tell the servlet about your SAML Identity Provider.
# In addition, make sure to set authType in configuration.properties.js to "SAML."
# For non-SAML use cases, they should remain commented out.
##################################################################################

# The configuration profile needs to be set to the value "saml" to allow trigger
# configuring the servlet to use SAML authentication. When you uncomment this
# property, you will also need to set the remaining properties in this section to
# configure the specifics of your SAML authentication process.
#spring.profiles.active=saml

# This is the name of the application registered with your identity provider
# It may be a simple string or the URL to your server. See your IdP's documentation
# for more information.
#security.saml.entityId=suitback

# This is the location of the metadata file provided by your IdP.
# It should be a URI (generally a file:/// URI).
#security.saml.metadataLocations=file:///LOCATION

# This is the interval, in milliseconds, for refreshing the metadata from
# the identity provider. Set to -1 (the default) to only request the metadata
# once.
#security.saml.metadataRefreshInterval=

# This is the default URL that the user will be redirected to after successfully
# logging on via SAML. It is only used if there was no saved request (e.g, if
# the user hadn't been asked to log in after trying to go to a particular URL).
# The default value is / which should be fine for most SUIT-based applications.  
#security.saml.defaultSuccessUrl=
  
# This is the default URL that the user will be redirected to after successfully
# logging out via SAML. The default value is /loggedout. 
#security.saml.defaultLogoutUrl=

# This is the certificate file to use for communicating securely with your IdP.
# It should be a URI (generally a file:/// URI).
#security.saml.keyDerLocation=

# This is the public key file to use for communicating securely with your IdP.
# It should be a URI (generally a file:/// URI).
#security.saml.keyPemLocation=

# This might need to be uncommented if you are integrating with Microsoft's
# Azure AD identity provider and you see an error saying "The SAML authentication
# request property 'Scoping/ProxyCount' is not supported." In other cases, you
# should it as is, commented out.
#saml.sso.profile-options.include-scoping=false


##################################################################################
# SAML + Load-Balancer Configuration
# Use these properties to configure the SAML SSL when running the servlet behind
# a load balancer, in addition to the SAML Configuration parameters above. For
# non-SAML use cases, they should remain commented out.
##################################################################################

# Set this to true to enable the load-balancer configuration
#saml.sso.context-provider.lb.enabled=true

# This is the protocol scheme for the load balancer's URI.
#saml.sso.context-provider.lb.scheme=https

# This is the port the load balancer is running on.
#saml.sso.context-provider.lb.server-port=443

# This is the server name for the load balancer. 
#saml.sso.context-provider.lb.server-name=

# This is the context path for the load balancer
#saml.sso.context-provider.lb.context-path=/searchui

# This determines whether the port number is included in the generated URL 
#saml.sso.context-provider.lb.include-server-port-in-request-url=false

# This is the base URL used when generating SAML metadata with the servlet
# It generally should match the pieces specified above. For example, if you
# have the scheme set to https, the port to 443, the server name to myhost.com,
# the context path to /searchui, and the include-port property set to false,
# the URL might be "https://.myhost.com/searchui".
#saml.sso.metadata-generator.entity-base-url=


##################################################################################
# Logging Configuration
# Logging can be controlled by adding a property whose name starts with
# "logging.level." followed by the fully-qualified name of the class to log and 
# setting the property's value to the logging level you want.
##################################################################################

# For example:
# To see information about the REST API calls proxied to the Attivio server:   
#logging.level.com.attivio.suitback.controllers.RestProxy=TRACE
# To see information about the way the servlet serves the configuration and users files:
#logging.level.com.attivio.suitback.controllers.ConfigController=TRACE
# To see information about the way the servlet identifies the logged-in user:
#logging.level.com.attivio.suitback.controllers.UserController=TRACE
# To see information about the security configuration of the servlet:
#logging.level.com.attivio.suitback.config.SecurityConfigBasic=TRACE
# or, when using SAML authentication:
#logging.level.com.attivio.suitback.config.SecurityConfigSAML=TRACE
# To see information about SAML-related issues (either or both of these):
#logging.level.org.springframework.security.saml=DEBUG
#logging.level.org.opensaml=DEBUG
##################################################################################
# Miscellaneous
# Additional properties you can choose to set or not.
##################################################################################

# This allows ANSI-colored output if the terminal supports it. It's useful mainly
# when running the executable WAR directly in a console as it won't affect the
# servlet container's logs.
spring.output.ansi.enabled=DETECT
